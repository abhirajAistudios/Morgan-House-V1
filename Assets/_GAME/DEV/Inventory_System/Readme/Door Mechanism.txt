========================================================

🚪 DOOR SYSTEM — Interactable, Lockable, Auto-Closing
--------------------------------------------------------

This system allows designers to easily create doors that can:
- Be locked/unlocked
- Require a key from inventory
- Be jammed
- Open away from the player
- Auto-close when the player walks away
- Be toggled via interaction (E)

🧩 Scripts Used:
----------------
- DoorInteraction.cs → Attach to Door object
- DoorUIManager.cs   → Manages UI message (e.g., "Press E to open door")
- DoorState.cs       → Enum for Locked, Unlocked, Jammed

🛠 Scene Setup:
---------------
1. 📦 Create a Door Setup:
   - Empty GameObject → Rename: `DoorHinge` (this will rotate)
   - Add your door mesh/model as child → Rename: `Door`
   - Set the pivot of `DoorHinge` to the hinge side (where door should rotate)

2. 🧠 Attach `DoorInteraction.cs` to `Door`

3. 🔧 Assign the following in Inspector:
   - `doorHinge`       → Drag this same object (self)
   - `requiredKeyName` → Must match name of the key (e.g., "Key")
   - `AudioSource`     → Drag or add audio source on hinge
   - AudioClips:
     - `soundOpen`
     - `soundClose`
     - `soundLocked`
     - `soundUnlock`

4. 🎮 Add a trigger:
   - Add `BoxCollider` (check "Is Trigger")
   - Size it as needed for interaction zone

5. 🧍 Player Requirements:
   - Tag the player object as `"Player"`
  
  Note:-The door script things name should match the scriptable object name 

========================================================

🔧 DOOR DESIGNER SETTINGS
-------------------------

In `DoorInteraction.cs`, you'll find these settings:

```csharp
public bool disableInteraction = false; // ✅ Prevents interaction (used in cutscenes, logic blocks)
public bool autoCloseEnabled = true;    // ✅ Auto-close after walking away
public float autoCloseDistance = 5f;    // How far player must go to auto-close
